import { useState } from "react";
import "./RPSGame.css";

// –¢–∏–ø—ã –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π 
type Choice = "rock" | "paper" | "scissors";
type Result = "win" | "lose" | "draw";

// –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏ –¥–ª—è –ª–æ–≥–∏–∫–∏, –∏ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–Ω–æ–ø–æ–∫
const CHOICES: Array<{ key: Choice; label: string; emoji: string }> = [
  { key: "rock",     label: "Rock",     emoji: "ü™®" },
  { key: "paper",    label: "Paper",    emoji: "üìÑ" },
  { key: "scissors", label: "Scissors", emoji: "‚úÇÔ∏è" },
];

// –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥ (win/lose/draw)
function decide(player: Choice, cpu: Choice): Result {
  if (player === cpu) return "draw";
  if (
    (player === "rock"     && cpu === "scissors") ||
    (player === "paper"    && cpu === "rock")     ||
    (player === "scissors" && cpu === "paper")
  ) return "win";
  return "lose";
}

export default function RPSGame() {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ: –≤—ã–±–æ—Ä—ã –∏–≥—Ä–æ–∫–∞/–∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –∏ –∏—Ç–æ–≥ —Ä–∞—É–Ω–¥–∞
  const [playerChoice, setPlayerChoice] = useState<Choice | null>(null);
  const [cpuChoice, setCpuChoice] = useState<Choice | null>(null);
  const [result, setResult] = useState<Result | null>(null);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ-–≤–∞—Ä–∏–∞–Ω—Ç—É
  const onPick = (choice: Choice) => {
    if (playerChoice) return; // –Ω–µ –¥–∞—ë–º –∫–ª–∏–∫–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–æ reset
    const cpu = CHOICES[Math.floor(Math.random() * CHOICES.length)].key; // —Å–ª—É—á–∞–π–Ω—ã–π —Ö–æ–¥ CPU
    setPlayerChoice(choice);
    setCpuChoice(cpu);
    setResult(decide(choice, cpu)); // —Å—á–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥
  };

  // –°–±—Ä–æ—Å –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é (–Ω–æ–≤–∞—è –ø–∞—Ä—Ç–∏—è)
  const reset = () => {
    setPlayerChoice(null);
    setCpuChoice(null);
    setResult(null);
  };

  return (
    <div className="rps-wrap">
      <h1>Rock ¬∑ Paper ¬∑ Scissors</h1>
      <p className="subtitle">Choose your weapon</p>

      {/* –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞: —Å—Ç—Ä–æ–∏–º –∏–∑ CHOICES */}
      <div className="arena">
        {CHOICES.map(({ key, label, emoji }) => (
          <button
            key={key}
            className={`card ${playerChoice === key ? "selected" : ""}`}
            onClick={() => onPick(key)}
            disabled={!!playerChoice}            // –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
            aria-label={`Choose ${label}`}       // –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è —Å–∫—Ä–∏–Ω—Ä–∏–¥–µ—Ä–æ–≤
          >
            <span className="emoji" aria-hidden>{emoji}</span>
            <span className="label">{label}</span>
          </button>
        ))}
      </div>

      {/* –°—Ç–∞—Ç—É—Å —Ä–∞—É–Ω–¥–∞: —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä–æ–∫ –∏ CPU */}
      <div className="status">
        <p>You choose: <b>{playerChoice ?? "‚Äî"}</b></p>
        <p>CPU chooses: <b>{cpuChoice ?? "‚Äî"}</b></p>

        {/* –ò—Ç–æ–≥ + —ç–º–æ–¥–∑–∏ */}
        <div className={`result-row ${result ?? ""}`}>
          <span className="result-title">Result:</span>
          <span className="result-value">
            {result
              ? result === "win"
                ? "You win!"
                : result === "lose"
                ? "You lose"
                : "Draw"
              : "‚Äî"}
          </span>

          {result && (
            <span
              className="result-emoji"
              aria-label={
                result === "win" ? "victory" : result === "lose" ? "sad" : "handshake"
              }
              title={
                result === "win" ? "Victory" : result === "lose" ? "Sad" : "Handshake"
              }
            >
              {result === "win" ? "üèÜ" : result === "lose" ? "üò¢" : "ü§ù"}
            </span>
          )}
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã */}
      <button className="reset" onClick={reset}>Restart game</button>
    </div>
  );
}
